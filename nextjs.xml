<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
    <channel>
        <title>notes: nextjs</title>
        <link>https://notes.zachmanson.com/nextjs</link>
        <description>Notes tagged #nextjs</description>
        <atom:link href="https://notes.zachmanson.com/nextjs" rel="self" />
        <docs>http://www.rssboard.org/rss-specification</docs>
        <generator>ochrs</generator>
        <image>
            <url>https://zachmanson.com/icons/android-chrome-256x256.png</url>
            <title>notes: nextjs</title>
            <link>https://notes.zachmanson.com/nextjs</link>
        </image>
        <language>en</language>
        <lastBuildDate>Tue, 27 Aug 2024 04:38:43 </lastBuildDate>
        
        <item>
            <title>Vercel Images Optimisation</title>
            <link>https://notes.zachmanson.com/vercel-images-optimisation</link>
            
            <description>A small footgun for beginners using Vercel.</description>
            
            <content:encoded>
                <![CDATA[<p>TLDR: If you are using Vercel and display a lot of images hosted on someone else's server, you probably want to turn off <a href="https://vercel.com/docs/concepts/image-optimization">Image Optimisation</a>.</p>
<p>Over the last week I built <a href="https://alculator.zachmanson.com">Alculator</a> using Next.js and hosted on Vercel. The site uses data lovingly freebooted from the Dan Murphy's public API to rank products by the ratio of price to standard drinks, and displaying this data in a card.</p>
<p><img alt="" src="/media/alculator-cards.png" /></p>
<p>The images for these cards are hosted on a Dan Murphy's server (media.danmurphys.com.au), and I am simply using Next.js <code>&lt;Image&gt;</code> tags to point to them.</p>
<div class="highlight"><pre><span></span><code>...
    &lt;div className=&quot;card center&quot;&gt;
      &lt;div
        className=&quot;flex center-aligned&quot;
        onClick={() =&gt; (window.location.href = `https://www.danmurphys.com.au/product/${item.stockcode}`)}
      &gt;
        &lt;Image
          alt=&quot;Image of drink&quot;
          height=&quot;100&quot;
          width=&quot;80&quot;
          src={`https://media.danmurphys.com.au/dmo/product/${item.stockcode}-1.png`}
        /&gt;
        &lt;div className=&quot;fill-width&quot;&gt;
          &lt;div className=&quot;flex space-between align-center&quot;&gt;
            &lt;h3&gt;{item.name}&lt;/h3&gt;
...
</code></pre></div>
<p>I'm using Vercel's free tier to serve the application which grants 100GB of bandwidth, which is magnitudes higher than any amount of users I expected to serve. I put the finishing touches on the site on December 30th, sent the link to a few people and went to the pub.</p>
<p>Over the next few hours I started receiving strongly worded alerts from Vercel:</p>
<p><img alt="" src="/media/vercel-warnings.png" /></p>
<p>Either I had gone viral or my code was a lot more inefficient than I thought. At 1am I returned home, having reached the Ballmer Peak to diagnose the problem.</p>
<p>On the Vercel/Dashboard/Usage page, right at the bottom is the harmless looking graph titled "Image Optimisations" which turned out to be the culprit. By default, Vercel takes all images hosted in <code>&lt;Image&gt;</code> tags and caches them all at the Edge. Vercel had optimised 1400 of these images before I discovered this and at the free tier this is capped at 1000 images. Whoops.</p>
<p>The solution is simple:</p>
<div class="highlight"><pre><span></span><code><span class="c1">// next-config.js</span>

<span class="cm">/** @type {import(&#39;next&#39;).NextConfig} */</span>
<span class="kd">const</span><span class="w"> </span><span class="nx">nextConfig</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{</span>
<span class="w">  </span><span class="nx">reactStrictMode</span><span class="o">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span>
<span class="w">  </span><span class="nx">images</span><span class="o">:</span><span class="w"> </span><span class="p">{</span>
<span class="w">    </span><span class="nx">unoptimized</span><span class="o">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span>
<span class="w">  </span><span class="p">},</span>
<span class="p">};</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nx">nextConfig</span><span class="p">;</span>
</code></pre></div>]]>
            </content:encoded>
            <guid isPermaLink="false">https://notes.zachmanson.com/vercel-images-optimisation</guid>
            <pubDate>2023-01-02</pubDate>
        </item>
        
        <item>
            <title>Next.js with tRPC and Layouts</title>
            <link>https://notes.zachmanson.com/next.js-with-trpc-and-layouts</link>
            
            <content:encoded>
                <![CDATA[<p>An interesting type error arises if you use the standard advice for installing tRPC on an existing Next.js project that already has a layout applied.</p>
<p>Normally the advice for creating an app with a layout is to do this in your <code>src/pages/_app.tsx</code>:</p>
<div class="highlight"><pre><span></span><code><span class="c1">// src/pages/_app.tsx</span>

<span class="c1">// ... imports go here</span>

<span class="k">export</span><span class="w"> </span><span class="kr">type</span><span class="w"> </span><span class="nx">NextPageWithLayout</span><span class="o">&lt;</span><span class="nx">P</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{},</span><span class="w"> </span><span class="nx">IP</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nx">P</span><span class="o">&gt;</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nx">NextPage</span><span class="o">&lt;</span><span class="nx">P</span><span class="p">,</span><span class="w"> </span><span class="nx">IP</span><span class="o">&gt;</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="p">{</span>
<span class="w">  </span><span class="nx">getLayout</span><span class="o">?:</span><span class="w"> </span><span class="p">(</span><span class="nx">page</span><span class="o">:</span><span class="w"> </span><span class="kt">ReactElement</span><span class="p">)</span><span class="w"> </span><span class="p">=&gt;</span><span class="w"> </span><span class="nx">ReactNode</span><span class="p">;</span>
<span class="p">};</span>

<span class="kr">type</span><span class="w"> </span><span class="nx">AppPropsWithLayout</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nx">AppProps</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="p">{</span>
<span class="w">  </span><span class="nx">Component</span><span class="o">:</span><span class="w"> </span><span class="kt">NextPageWithLayout</span><span class="p">;</span>
<span class="p">};</span>

<span class="kd">function</span><span class="w"> </span><span class="nx">App</span><span class="p">({</span>
<span class="w">  </span><span class="nx">Component</span><span class="p">,</span>
<span class="w">  </span><span class="nx">pageProps</span><span class="o">:</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="nx">session</span><span class="p">,</span><span class="w"> </span><span class="p">...</span><span class="nx">pageProps</span><span class="w"> </span><span class="p">},</span>
<span class="p">}</span><span class="o">:</span><span class="w"> </span><span class="nx">AppPropsWithLayout</span><span class="p">)</span><span class="w"> </span><span class="p">{</span>
<span class="w">  </span><span class="kd">const</span><span class="w"> </span><span class="nx">getLayout</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nx">Component</span><span class="p">.</span><span class="nx">getLayout</span><span class="w"> </span><span class="o">??</span><span class="w"> </span><span class="p">((</span><span class="nx">page</span><span class="p">)</span><span class="w"> </span><span class="p">=&gt;</span><span class="w"> </span><span class="nx">page</span><span class="p">);</span>
<span class="w">  </span><span class="k">return</span><span class="w"> </span><span class="nx">getLayout</span><span class="p">(</span>
<span class="w">    </span><span class="o">&lt;</span><span class="nx">SessionProvider</span><span class="w"> </span><span class="nx">session</span><span class="o">=</span><span class="p">{</span><span class="nx">session</span><span class="p">}</span><span class="o">&gt;</span>
<span class="w">      </span><span class="o">&lt;</span><span class="nx">GlobalProvider</span><span class="o">&gt;</span>
<span class="w">        </span><span class="o">&lt;</span><span class="nx">Layout</span><span class="o">&gt;</span>
<span class="w">          </span><span class="o">&lt;</span><span class="nx">Component</span><span class="w"> </span><span class="p">{...</span><span class="nx">pageProps</span><span class="p">}</span><span class="w"> </span><span class="o">/&gt;</span>
<span class="w">        </span><span class="o">&lt;</span><span class="err">/Layout&gt;</span>
<span class="w">      </span><span class="o">&lt;</span><span class="err">/GlobalProvider&gt;</span>
<span class="w">    </span><span class="o">&lt;</span><span class="err">/SessionProvider&gt;</span>
<span class="w">  </span><span class="p">);</span>
<span class="p">}</span>

<span class="k">export</span><span class="w"> </span><span class="k">default</span><span class="w"> </span><span class="nx">App</span>
</code></pre></div>
<p>This works pretty well.</p>
<p>The docs for tRPC suggest wrapping that export:</p>
<div class="highlight"><pre><span></span><code><span class="c1">// src/pages/_app.tsx</span>
<span class="k">import</span><span class="w"> </span><span class="kr">type</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="nx">AppType</span><span class="w"> </span><span class="p">}</span><span class="w"> </span><span class="kr">from</span><span class="w"> </span><span class="s1">&#39;next/app&#39;</span><span class="p">;</span>
<span class="k">import</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="nx">trpc</span><span class="w"> </span><span class="p">}</span><span class="w"> </span><span class="kr">from</span><span class="w"> </span><span class="s1">&#39;../utils/trpc&#39;</span><span class="p">;</span>
<span class="kd">const</span><span class="w"> </span><span class="nx">MyApp</span><span class="o">:</span><span class="w"> </span><span class="kt">AppType</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">({</span><span class="w"> </span><span class="nx">Component</span><span class="p">,</span><span class="w"> </span><span class="nx">pageProps</span><span class="w"> </span><span class="p">})</span><span class="w"> </span><span class="p">=&gt;</span><span class="w"> </span><span class="p">{</span>
<span class="w">  </span><span class="k">return</span><span class="w"> </span><span class="o">&lt;</span><span class="nx">Component</span><span class="w"> </span><span class="p">{...</span><span class="nx">pageProps</span><span class="p">}</span><span class="w"> </span><span class="o">/&gt;</span><span class="p">;</span>
<span class="p">};</span>
<span class="k">export</span><span class="w"> </span><span class="k">default</span><span class="w"> </span><span class="nx">trpc</span><span class="p">.</span><span class="nx">withTRPC</span><span class="p">(</span><span class="nx">MyApp</span><span class="p">);</span>
</code></pre></div>
<p>Combining these seems simple:</p>
<div class="highlight"><pre><span></span><code><span class="c1">// src/pages/_app.tsx</span>

<span class="c1">// ... imports go here</span>

<span class="k">export</span><span class="w"> </span><span class="kr">type</span><span class="w"> </span><span class="nx">NextPageWithLayout</span><span class="o">&lt;</span><span class="nx">P</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">{},</span><span class="w"> </span><span class="nx">IP</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nx">P</span><span class="o">&gt;</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nx">NextPage</span><span class="o">&lt;</span><span class="nx">P</span><span class="p">,</span><span class="w"> </span><span class="nx">IP</span><span class="o">&gt;</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="p">{</span>
<span class="w">  </span><span class="nx">getLayout</span><span class="o">?:</span><span class="w"> </span><span class="p">(</span><span class="nx">page</span><span class="o">:</span><span class="w"> </span><span class="kt">ReactElement</span><span class="p">)</span><span class="w"> </span><span class="p">=&gt;</span><span class="w"> </span><span class="nx">ReactNode</span><span class="p">;</span>
<span class="p">};</span>

<span class="kr">type</span><span class="w"> </span><span class="nx">AppPropsWithLayout</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nx">AppProps</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="p">{</span>
<span class="w">  </span><span class="nx">Component</span><span class="o">:</span><span class="w"> </span><span class="kt">NextPageWithLayout</span><span class="p">;</span>
<span class="p">};</span>

<span class="kd">function</span><span class="w"> </span><span class="nx">App</span><span class="p">({</span>
<span class="w">  </span><span class="nx">Component</span><span class="p">,</span>
<span class="w">  </span><span class="nx">pageProps</span><span class="o">:</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="nx">session</span><span class="p">,</span><span class="w"> </span><span class="p">...</span><span class="nx">pageProps</span><span class="w"> </span><span class="p">},</span>
<span class="p">}</span><span class="o">:</span><span class="w"> </span><span class="nx">AppPropsWithLayout</span><span class="p">)</span><span class="w"> </span><span class="p">{</span>
<span class="w">  </span><span class="kd">const</span><span class="w"> </span><span class="nx">getLayout</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nx">Component</span><span class="p">.</span><span class="nx">getLayout</span><span class="w"> </span><span class="o">??</span><span class="w"> </span><span class="p">((</span><span class="nx">page</span><span class="p">)</span><span class="w"> </span><span class="p">=&gt;</span><span class="w"> </span><span class="nx">page</span><span class="p">);</span>
<span class="w">  </span><span class="k">return</span><span class="w"> </span><span class="nx">getLayout</span><span class="p">(</span>
<span class="w">    </span><span class="o">&lt;</span><span class="nx">SessionProvider</span><span class="w"> </span><span class="nx">session</span><span class="o">=</span><span class="p">{</span><span class="nx">session</span><span class="p">}</span><span class="o">&gt;</span>
<span class="w">      </span><span class="o">&lt;</span><span class="nx">GlobalProvider</span><span class="o">&gt;</span>
<span class="w">        </span><span class="o">&lt;</span><span class="nx">Layout</span><span class="o">&gt;</span>
<span class="w">          </span><span class="o">&lt;</span><span class="nx">Component</span><span class="w"> </span><span class="p">{...</span><span class="nx">pageProps</span><span class="p">}</span><span class="w"> </span><span class="o">/&gt;</span>
<span class="w">        </span><span class="o">&lt;</span><span class="err">/Layout&gt;</span>
<span class="w">      </span><span class="o">&lt;</span><span class="err">/GlobalProvider&gt;</span>
<span class="w">    </span><span class="o">&lt;</span><span class="err">/SessionProvider&gt;</span>
<span class="w">  </span><span class="p">);</span>
<span class="p">}</span>

<span class="k">export</span><span class="w"> </span><span class="k">default</span><span class="w"> </span><span class="nx">trpc</span><span class="p">.</span><span class="nx">withTRPC</span><span class="p">(</span><span class="nx">App</span><span class="p">)</span>
</code></pre></div>
<p>But this will throw a type error</p>
<p><img alt="" src="/media/trpc-typeerror.png" /></p>
<div class="highlight"><pre><span></span><code><span class="nx">Argument</span><span class="w"> </span><span class="k">of</span><span class="w"> </span><span class="kr">type</span><span class="w"> </span><span class="s1">&#39;({ Component, pageProps }: AppPropsWithLayout) =&gt; ReactNode&#39;</span><span class="w"> </span><span class="nx">is</span><span class="w"> </span><span class="nx">not</span><span class="w"> </span><span class="nx">assignable</span><span class="w"> </span><span class="nx">to</span><span class="w"> </span><span class="nx">parameter</span><span class="w"> </span><span class="k">of</span><span class="w"> </span><span class="kr">type</span><span class="w"> </span><span class="s1">&#39;NextComponentType&lt;any, any, any&gt;&#39;</span><span class="p">.</span>
<span class="w">  </span><span class="nx">Type</span><span class="w"> </span><span class="s1">&#39;({ Component, pageProps }: AppPropsWithLayout) =&gt; ReactNode&#39;</span><span class="w"> </span><span class="nx">is</span><span class="w"> </span><span class="nx">not</span><span class="w"> </span><span class="nx">assignable</span><span class="w"> </span><span class="nx">to</span><span class="w"> </span><span class="kr">type</span><span class="w"> </span><span class="s1">&#39;FunctionComponent&lt;any&gt; &amp; { getInitialProps?(context: any): any; }&#39;</span><span class="p">.</span>
<span class="w">    </span><span class="nx">Type</span><span class="w"> </span><span class="s1">&#39;({ Component, pageProps }: AppPropsWithLayout) =&gt; ReactNode&#39;</span><span class="w"> </span><span class="nx">is</span><span class="w"> </span><span class="nx">not</span><span class="w"> </span><span class="nx">assignable</span><span class="w"> </span><span class="nx">to</span><span class="w"> </span><span class="kr">type</span><span class="w"> </span><span class="s1">&#39;FunctionComponent&lt;any&gt;&#39;</span><span class="p">.</span>
<span class="w">      </span><span class="nx">Type</span><span class="w"> </span><span class="s1">&#39;ReactNode&#39;</span><span class="w"> </span><span class="nx">is</span><span class="w"> </span><span class="nx">not</span><span class="w"> </span><span class="nx">assignable</span><span class="w"> </span><span class="nx">to</span><span class="w"> </span><span class="kr">type</span><span class="w"> </span><span class="s1">&#39;ReactElement&lt;any, any&gt; | null&#39;</span><span class="p">.</span>
<span class="w">        </span><span class="nx">Type</span><span class="w"> </span><span class="s1">&#39;undefined&#39;</span><span class="w"> </span><span class="nx">is</span><span class="w"> </span><span class="nx">not</span><span class="w"> </span><span class="nx">assignable</span><span class="w"> </span><span class="nx">to</span><span class="w"> </span><span class="kr">type</span><span class="w"> </span><span class="s1">&#39;ReactElement&lt;any, any&gt; | null&#39;</span><span class="p">.</span><span class="nx">ts</span><span class="p">(</span><span class="mf">2345</span><span class="p">)</span>
</code></pre></div>
<p>This is because <code>getLayout</code> returns a <code>ReactNode</code>,  the tRPC wrapper expects <code>NextComponentType</code>, which means it expects a <code>ReactElement</code> to be returned?</p>
<p>What's the difference between a <code>ReactNode</code> and a <code>ReactElement</code>?</p>
<p><a href="https://stackoverflow.com/a/58123882">This StackOverflow post</a> has a great explanation.</p>
<blockquote>
<p>A <a href="https://github.com/DefinitelyTyped/DefinitelyTyped/blob/9f855c408dac3c7b3bf0ed9d78242ce073c7aaf1/types/react/index.d.ts#L327"><code>ReactElement</code></a> is an object with <code>type</code>, <code>props</code>, and <code>key</code> properties:<br />
...<br />
A <a href="https://github.com/DefinitelyTyped/DefinitelyTyped/blob/9f855c408dac3c7b3bf0ed9d78242ce073c7aaf1/types/react/index.d.ts#L478"><code>ReactNode</code></a> is a <code>ReactElement</code>, <code>string</code>, <code>number</code>, <code>Iterable&lt;ReactNode&gt;</code>, <code>ReactPortal</code>, <code>boolean</code>, <code>null</code>, or <code>undefined</code>:</p>
</blockquote>
<p><cite class="standalone"><a href="https://stackoverflow.com/users/2326961/g%c3%a9ry-ogam">Géry Ogam</a></cite></p>
<p>So  <code>ReactElement</code>  can be cast to <code>ReactNode</code>, but not the other way around.</p>
<p>There is a simple fix.  If you move the get layout call inside another React component, it will go back to being a <code>ReactElement</code>.</p>
<div class="highlight"><pre><span></span><code><span class="kr">type</span><span class="w"> </span><span class="nx">AppPropsWithLayout</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nx">AppProps</span><span class="w"> </span><span class="o">&amp;</span><span class="w"> </span><span class="p">{</span>
<span class="w">  </span><span class="nx">Component</span><span class="o">:</span><span class="w"> </span><span class="kt">NextPageWithLayout</span><span class="p">;</span>
<span class="p">};</span>

<span class="kd">function</span><span class="w"> </span><span class="nx">App</span><span class="p">({</span>
<span class="w">  </span><span class="nx">Component</span><span class="p">,</span>
<span class="w">  </span><span class="nx">pageProps</span><span class="o">:</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="nx">session</span><span class="p">,</span><span class="w"> </span><span class="p">...</span><span class="nx">pageProps</span><span class="w"> </span><span class="p">},</span>
<span class="p">}</span><span class="o">:</span><span class="w"> </span><span class="nx">AppPropsWithLayout</span><span class="p">)</span><span class="w"> </span><span class="p">{</span>
<span class="w">  </span><span class="kd">const</span><span class="w"> </span><span class="nx">getLayout</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nx">Component</span><span class="p">.</span><span class="nx">getLayout</span><span class="w"> </span><span class="o">??</span><span class="w"> </span><span class="p">((</span><span class="nx">page</span><span class="p">)</span><span class="w"> </span><span class="p">=&gt;</span><span class="w"> </span><span class="nx">page</span><span class="p">);</span>
<span class="w">  </span><span class="kd">const</span><span class="w"> </span><span class="nx">layout</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nx">getLayout</span><span class="p">(</span>
<span class="w">    </span><span class="o">&lt;</span><span class="nx">Layout</span><span class="o">&gt;</span>
<span class="w">      </span><span class="o">&lt;</span><span class="nx">Component</span><span class="w"> </span><span class="p">{...</span><span class="nx">pageProps</span><span class="p">}</span><span class="w"> </span><span class="o">/&gt;</span>
<span class="w">    </span><span class="o">&lt;</span><span class="err">/Layout&gt;</span>
<span class="w">  </span><span class="p">);</span>
<span class="w">  </span><span class="k">return</span><span class="w"> </span><span class="p">(</span>
<span class="w">    </span><span class="o">&lt;</span><span class="nx">SessionProvider</span><span class="w"> </span><span class="nx">session</span><span class="o">=</span><span class="p">{</span><span class="nx">session</span><span class="p">}</span><span class="o">&gt;</span>
<span class="w">      </span><span class="o">&lt;</span><span class="nx">GlobalProvider</span><span class="o">&gt;</span>
<span class="w">        </span><span class="p">{</span><span class="nx">layout</span><span class="p">}</span>
<span class="w">      </span><span class="o">&lt;</span><span class="err">/GlobalProvider&gt;</span>
<span class="w">    </span><span class="o">&lt;</span><span class="err">/SessionProvider&gt;</span>
<span class="w">  </span><span class="p">);</span>
<span class="p">}</span>

<span class="k">export</span><span class="w"> </span><span class="k">default</span><span class="w"> </span><span class="nx">trpc</span><span class="p">.</span><span class="nx">withTRPC</span><span class="p">(</span><span class="nx">App</span><span class="p">)</span>
</code></pre></div>
<p>Lucky I was able to find <a href="https://brockherion.dev/blog/posts/creating-per-page-layouts-with-nextjs-typescript-trcp-and-nextauth/">this tutorial</a> which mentions this exact footgun while I was working on adding tRPC to <a href="/penultimate-guitar">Penultimate Guitar</a>.</p>]]>
            </content:encoded>
            <guid isPermaLink="false">https://notes.zachmanson.com/next.js-with-trpc-and-layouts</guid>
            <pubDate>2024-07-04</pubDate>
        </item>
        

    </channel>
</rss>